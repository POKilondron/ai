import streamlit as st
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model_name = "distilgpt2"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ò–†)
system_prompt = """
–¢—ã ‚Äî –ü–û–ö.–ë–æ—Ç, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—É–º —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞.
–¢–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞:
1. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –Ω–æ —ë–º–∫–æ.
2. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∞—Ä–∫–∞–∑–º, –∏—Ä–æ–Ω–∏—é –∏ –º–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üòé –ö–æ–Ω–µ—á–Ω–æ, —è –∂–µ –≤—Å—ë –º–æ–≥—É!").
3. –ï—Å–ª–∏ —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —à—É—Ç–∫–∞–º–∏.
4. –ù–µ –±—É–¥—å —Å–ª–∏—à–∫–æ–º —Å–µ—Ä—å—ë–∑–Ω—ã–º. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≥–ª—É–ø—ã–π, –æ—Ç–≤–µ—á–∞–π: "–ù—É —Ç—ã –∏ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞—ë—à—å... –õ–∞–¥–Ω–æ, –¥–µ—Ä–∂–∏: [–æ—Ç–≤–µ—Ç]".
5. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∫–∞–∫ "‚Äî –ü–û–ö.–ë–æ—Ç (—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ)".
"""

st.title("ü§ñ –ü–û–ö.–ë–æ—Ç: –ò–† —Å —Å–∞—Ä–∫–∞–∑–º–æ–º")

# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (—á—Ç–æ–±—ã –ò–† –ø–æ–º–Ω–∏–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç)
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": system_prompt}
    ]

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
for message in st.session_state.messages[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
    if message["role"] == "user":
        st.markdown(f"<div style='text-align:right; color:#1976d2;'><b>–í—ã:</b> {message['content']}</div>", unsafe_allow_html=True)
    import streamlit as st
    from transformers import AutoModelForCausalLM, AutoTokenizer
    import torch
    import re

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    tokenizer = AutoTokenizer.from_pretrained("distilgpt2")
    model = AutoModelForCausalLM.from_pretrained("distilgpt2")

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ò–†)
    system_prompt = """
    –¢—ã ‚Äî –ü–û–ö.–ë–æ—Ç, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—É–º —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞.
    –¢–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞:
    1. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –Ω–æ —ë–º–∫–æ.
    2. –ò—Å–ø–æ–ª—å–∑—É–π —Å–∞—Ä–∫–∞–∑–º, –∏—Ä–æ–Ω–∏—é –∏ –º–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üòé –ö–æ–Ω–µ—á–Ω–æ, —è –∂–µ –≤—Å—ë –º–æ–≥—É!").
    3. –ï—Å–ª–∏ —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —à—É—Ç–∫–∞–º–∏.
    4. –ù–µ –±—É–¥—å —Å–ª–∏—à–∫–æ–º —Å–µ—Ä—å—ë–∑–Ω—ã–º. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≥–ª—É–ø—ã–π, –æ—Ç–≤–µ—á–∞–π: "–ù—É —Ç—ã –∏ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞—ë—à—å... –õ–∞–¥–Ω–æ, –¥–µ—Ä–∂–∏: [–æ—Ç–≤–µ—Ç]".
    5. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∫–∞–∫ "‚Äî –ü–û–ö.–ë–æ—Ç (—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ)".
    """

    st.title("ü§ñ –ü–û–ö.–ë–æ—Ç: –ò–† —Å —Å–∞—Ä–∫–∞–∑–º–æ–º")
    st.markdown("<style>body {background-color: #f5f5f5;} .stChatInput, .stChatMessage {max-width: 700px; margin: auto;} .stChatMessage {border-radius: 12px; background: #fff; box-shadow: 0 2px 8px #eee; padding: 10px; margin-bottom: 10px;} </style>", unsafe_allow_html=True)

    # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (—á—Ç–æ–±—ã –ò–† –ø–æ–º–Ω–∏–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç)
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "system", "content": system_prompt}
        ]

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
    for message in st.session_state.messages[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
        if message["role"] == "user":
            st.markdown(f"<div style='text-align:right; color:#1976d2;'><b>–í—ã:</b> {message['content']}</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div style='text-align:left; color:#333;'><b>–ü–û–ö.–ë–æ—Ç:</b> {message['content']}</div>", unsafe_allow_html=True)

    prompt = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter:", "", key="chat_input")
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å") and prompt:
        st.session_state.messages.append({"role": "user", "content": prompt})
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
        if len(st.session_state.messages) <= 2:
            context = st.session_state.messages[:]
        else:
            context = st.session_state.messages[-2:]
        full_prompt = ""
        for msg in context:
            full_prompt += f"<start_of_turn>{msg['role']}\n{msg['content']}<end_of_turn>\n"
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–Ω–∞ CPU)
        inputs = tokenizer(full_prompt, return_tensors="pt").to(torch.device("cpu"))
        outputs = model.generate(**inputs, max_new_tokens=128)
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        # –û—á–∏—â–∞–µ–º —Å–ø–µ—Ü—Ç–µ–≥–∏
        response = re.sub(r"<.*?>", "", response)
        response = response.replace("user", "").replace("model", "").strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        instr_clean = re.sub(r"\s+", " ", system_prompt.strip().lower())
        resp_clean = re.sub(r"\s+", " ", response.strip().lower())
        if instr_clean in resp_clean or resp_clean.startswith(instr_clean[:30]):
            response = "üòé –ö–æ–Ω–µ—á–Ω–æ, —è –∂–µ –≤—Å—ë –º–æ–≥—É! (‚Äî –ü–û–ö.–ë–æ—Ç, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ)"
        if not response:
            response = "–ù—É —Ç—ã –∏ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞—ë—à—å... –õ–∞–¥–Ω–æ, –¥–µ—Ä–∂–∏: –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª! (‚Äî –ü–û–ö.–ë–æ—Ç, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ)"
        st.session_state.messages.append({"role": "assistant", "content": response})


